Kth Smallest Element in a BST
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Example 1:
Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1

Example 2:
Input: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
Output: 3

Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?

Constraints:

The number of elements of the BST is between 1 to 10^4.
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Hint #1  
Try to utilize the property of a BST.

Hint #2  
Try in-order traversal. (Credits to @chan13)

Hint #3  
What if you could modify the BST node's structure?

Hint #4  
The optimal runtime complexity is O(height of BST).

References:
https://leetcode.com/explore/challenge/card/may-leetcoding-challenge/536/week-3-may-15th-may-21st/3335/
https://leetcode.com/articles/kth-smallest-element-in-a-bst/
https://www.geeksforgeeks.org/tree-traversals-inorder-preorder-and-postorder/
https://www.geeksforgeeks.org/inorder-tree-traversal-without-recursion/
https://www.geeksforgeeks.org/binary-search-tree-set-1-search-and-insertion/